{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11000\viewh15560\viewkind0
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs36 \cf0 DisclosableView 
\f1\b0\fs28 (a Cocoa view and palette)\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\fs24 \cf0 \
Kurt Revis  <krevis@snoize.com>\
\
Version 1.2\
22 January 2006\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 What it is\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
This code implements a Cocoa view which can dynamically hide and show its contents, resizing its window appropriately. This is a fairly common UI behavior; some examples are the save sheets in Cocoa applications, the data-entry windows in the Address Book in Mac OS X 10.1, and the Get Info windows in the Finder in 10.2. However, Cocoa does not provide a built-in class which implements this behavior.\
\
For an example of this code in action, see my application MIDI Monitor:\
http://www.snoize.com/MIDIMonitor/\
\
This package includes a framework containing the class (SNDisclosableView), as well as a class for a nice-looking toggling button (SNDisclosureButton). Also, there is an Interface Builder palette, which makes it easy to use this class without writing any code at all.\
\
All the code is built Universal -- both PowerPC and Intel.\
\
Built copies of the framework and palette are included, along with the source code. The code is distributed under the BSD license.\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Installation instructions\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
This package includes an Interface Builder palette (DisclosableView.palette) and a framework (DisclosableView.framework).\
\
If you put the palette in any of these locations:\
            ~/Library/Palettes\
            ~/Developer/Palettes\
            /Library/Developer/Palettes\
            /Developer/Palettes\
            /Network/Developer/Palettes\
then Interface Builder will find it when it starts up.  Or, you can put the palette somewhere else, and tell IB where it is using the "Palettes" tab in the preferences.\
\
You only need the framework when you build your application.  Using a Copy Files build phase, copy the framework in YourApplication.app/Contents/Frameworks.  Also ensure that your application links against the framework.\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Developing with it\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
Here's a quick walk through the features.\
\
\'a5 Start Interface Builder, and make sure that the palette has been loaded.\
\'a5 Create a new, empty Cocoa file.  Create a new empty window.\
\'a5 From the DisclosableView palette, drag the toggle button and disclosable view into the window.\
\'a5 Drag a text field from the palette into the SNDisclosableView.\
\'a5 Test the interface (command-R). Click on the arrow to hide and show everything in the SNDisclosableView, resizing the window as necessary.\
\
You can put whatever views you like inside of the SNDisclosableView.\
\
Normally the disclosable view shrinks to a height of 0 when it is hidden. However, depending on how your interface is set up, you might want it to be larger or smaller than that. In that case, use the inspector in IB to set the hidden height larger or smaller.\
\
Note that SNDisclosableView manages the next-key-view loop correctly. When it hides its subviews, it removes them from the loop; when it shows them again, it adds them back to the loop. In order for this to work properly, however, you must put the SNDisclosableView itself in the loop. \
\
That is: the view above the SNDisclosableView should have its nextKeyView pointing to the SNDisclosableView. Then, the SNDisclosableView's nextKeyView should point to the first of its subviews. The subviews are connected together as usual, and then the last subview's nextKeyView should point to the next view outside of the SNDisclosableView.\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Using it in your application\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
To use SNDisclosableView and SNDisclosureButton in your application, you do 
\f2\i NOT
\f1\i0  need your end users to install the palette or the framework. Instead, you can include the framework inside of your application. To do this:\
\
\'a5 In your application's project, add DisclosableView.framework to the Frameworks section, under "Linked Frameworks".  Make sure the framework is added to the application target as well (you should see it appear in the "Link Binary With Libraries" build phase).\
\
\'a5 In your application's target, create a "Copy Files" build phase. Drag the framework into the list of files to copy. For "Where", choose "Frameworks". Leave the "Subpath" blank, and "copy only when installing" unchecked.\
\
Now when your application is built, the framework will be copied into the application's wrapper, and it will dynamically load the framework when it starts up.\
\
If you have problems, search for "embedded framework" on developer.apple.com.  At the time of this writing the relevant documentation is in the "Framework Programming Guide":\
http://developer.apple.com/documentation/MacOSX/Conceptual/BPFrameworks/Tasks/CreatingFrameworks.html#//apple_ref/doc/uid/20002258-106880\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Notes and bugs\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
The disclosure button is not quite as nice as the one that Carbon provides. The most obvious drawback is that it doesn't animate nicely as the window expands and contracts.  I'm not spending much time worrying about this, since I expect Apple to provide this control in Cocoa someday. (Of course, I expected it for 10.2, but that didn't happen...)\
\
Also note that SNDisclosableView is not tied to SNDisclosureButton in any way; the two objects go together nicely, but neither requires the other. So any button (or code) can be used to trigger the disclosable view.\
\
Resizing the SNDisclosableView in IB can cause its subviews to move, which is kind of annoying. Note that this doesn't happen to views inside of an NSBox or NSCustomView. I haven't managed to figure out exactly why this is happening or how to fix it--this aspect of IB is barely documented and is apparently something of a black art.\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 History\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
Version 1.0 (16 July 2002) was the first public release.\
\
Version 1.1 (3 September 2002) adds new behavior on Mac OS X 10.2 ("Jaguar"), to match Apple's applications. The views inside of the SNDisclosableView remain visible while the window changes size, instead of disappearing.  The code still works on systems earlier than 10.2, with the old behavior.\
\
Version 1.2 (22 January 2006) updates the project to Xcode 2.2. It ow builds Universal, so it's now native on Intel machines. The palette is now standalone (it doesn't require a framework in /Library/Frameworks) which makes it far easier to install.\
\
\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f0\b\fs28 \cf0 Comments\
\pard\tx1440\tx2880\tx4320\tx5760\tx7200\ql\qnatural

\f1\b0\fs24 \cf0 \
Questions or comments? Let me know: email <krevis@snoize.com>.\
I would especially like to hear from you if you use this code in a shipping app!\
}