*
* WHAT IS THIS?
*

MIDI Monitor is a Mac OS X application for monitoring MIDI data as it goes in and out of the computer.

This is the source code for the entire application.  You do NOT need any of this if you just want to use the application.  You only need the source if you want to play with the code, customize the application, or use parts of the code in your own project.

The source code is released as Open Source code, under the BSD license.  See the LICENSE file for the legal details.

The latest version of the code should be available here:
http://www.snoize.com/MIDIMonitor/Source/


*
* WHAT'S INCLUDED
*

Everything you need to build MIDI Monitor is here.  You should have a source tree that looks like this:

MIDI Monitor Source
	Applications
		MIDIMonitor
	Frameworks
		SnoizeMIDI
		SnoizeMIDISpy
		DisclosableView
	Scripts


In decreasing order of importance:

* Applications/MIDIMonitor

	The source to the MIDI Monitor application.  The project file is MIDIMonitor.pbxproj; open this using XCode.

	MIDI Monitor is a Cocoa application, written in Objective-C.

	The application relies on the other frameworks, described below.


* Frameworks/SnoizeMIDI

	A framework containing code for dealing with CoreMIDI in a Cocoa app:
		Creating a CoreMIDI client
		Finding MIDI devices, sources, and destinations
		Creating "streams" of input and output data, and hooking them up to inputs and outputs
		Parsing MIDI streams into separate MIDI messages
		Dealing with older versions of CoreMIDI (from 10.1 onwards)

	This framework is used by both MIDI Monitor and my other application, SysEx Librarian.  You should be able to use it in your own applications as well.

	The code is mainly Objective-C, with one ordinary C file.


* Frameworks/SnoizeMIDISpy

	This project builds two things: A CoreMIDI driver, and a framework.

	The CoreMIDI driver can "spy" on the MIDI sent to any destination in the system by any application.  (Look up the MIDIDriverEnableMonitoring() function in CoreMIDIServer/MIDIDriver.h for more details.)  The driver can then pass the MIDI data to another application.

	The framework is used by applications that want to use the driver. It manages the communication between the app and the driver.  It also provides the app with an easy way to install the CoreMIDI driver when necessary.

	This code is currently only used by MIDI Monitor, but it could be useful in other contexts.

	The driver is written in C++, and the framework is plain C code.  So you should be able to easily use the code from a Cocoa or Carbon application.

	Note that MIDI Monitor contains some code to channel the "spy" MIDI data into the rest of the SnoizeMIDI stream system, so it acts just like any other MIDI source.


* Frameworks/DisclosableView
	
	A framework containing a Cocoa "disclosable" view -- one that can be shown and hidden by the user on demand.


* Scripts

	Contains a script to build the final ("install") version of MIDI Monitor.


*
* HOW TO BUILD
*

The projects enclosed are for XCode 1.5.  You may be able to use the projects in earlier versions of XCode, but no guarantees (that's up to you -- I haven't tried it myself).

The frameworks are reasonably generic and should work on any version of OS X (10.1 is definitely preferred, though).  The application will only run on 10.2 and later.  It builds using the 10.2.7 SDK; if you didn't install this SDK along with XCode, you will probably want to.

For development builds: Open each framework's project in XCode, build it, and then build the whole application.  If you are lucky, it will Just Work.  The frameworks can be built in any order, but obviously the app must be built last.

For installation builds: There is a shell script in Scripts/BuildMIDIMonitor which builds the whole app and takes care of some miscellaneous details.  If you just run the script, you should end up with a MIDIMonitorBuild directory in your home directory, with an "InstalledProducts" directory inside containing the built application.  If you want the built results to go elsewhere, feel free to change the script.


*
* QUESTIONS?
*

Kurt Revis <krevis@snoize.com> is the original author of this code.  Please contact him with any questions.

