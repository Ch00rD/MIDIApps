#!/bin/zsh
#
# Script to make a disk image for an application.
#
# Arguments:
#	Install directory (containing the application itself)
#	Application executable name (without .app extension)
#	Output disk image path
#	Read Me file path
#

PUBLIC=/Users/Shared
INSTALL_DIRECTORY="$1"
APP_EXECUTABLE_NAME="$2"
APP_WRAPPER_NAME="${APP_EXECUTABLE_NAME}.app"
OUTPUT_IMAGE="$3"
READ_ME_FILE_PATH="$4"
VOLUME_NAME=$APP_EXECUTABLE_NAME

DO_APPLESCRIPT=1
# NOTE The Finder is broken in 10.1 and can't position things properly in a window using AppleScript.
if [[ `uname -r` == "5.5" ]] { DO_APPLESCRIPT=0 }

echo "Building disk image"

SCRATCH_IMAGE="/tmp/TempImage-$$.dmg"

# Create the image
echo "    Creating scratch image..."
rm -f $SCRATCH_IMAGE
hdiutil create $SCRATCH_IMAGE -megabytes 10 -layout NONE

# Create a /dev/disk device from the image
DRIVE=`hdid -nomount "$SCRATCH_IMAGE"`
# chop off whitespace that hdid gives us (bah!)
array=(${=DRIVE})
DRIVE=$array[1]

# Create a new filesystem on the disk device
newfs_hfs -v "$VOLUME_NAME" /dev/r${DRIVE:t}

# Remount the disk
echo "    Image formatted, ejecting $DRIVE..."
hdiutil eject $DRIVE

echo "    Mounting $SCRATCH_IMAGE..."
DRIVE=`hdid $SCRATCH_IMAGE`
# now we have the deviced path and the mount point, separated by whitespace
array=(${=DRIVE})
DRIVE=$array[1]
shift array
MOUNTPOINT="$array"

# Make the volume's root directory automatically open when mounted
if [ -x `which makeDirectoryAutoOpen` ]; then
   makeDirectoryAutoOpen -folder "$MOUNTPOINT"
else
   echo "    *** Couldn't find makeDirectoryAutoOpen, so not running it"
fi

# Copy the app into the mounted filesystem
echo "    Copying application..."
cp -R "$INSTALL_DIRECTORY/$APP_WRAPPER_NAME" "$MOUNTPOINT"

# And copy the Read Me file, if any
if [[ -r "$READ_ME_FILE_PATH" ]] ; then
	cp "$READ_ME_FILE_PATH" "$MOUNTPOINT"
	# And hide the file extension
	/Developer/Tools/SetFile -a E "$MOUNTPOINT/${READ_ME_FILE_PATH:t}"
fi

# Now position the window position, icons, etc.
if [[ $DO_APPLESCRIPT -eq 1 ]] ; then
	osascript <<- EndOfScript
	tell application "Finder"
		set theDisk to the disk "$VOLUME_NAME"
		set theWindow to the container window of theDisk
		set theApp to application file "$APP_WRAPPER_NAME" of theDisk
		set theReadMe to file "${READ_ME_FILE_PATH:t}" of theDisk
	
		-- Set the window to icon view, with big icons
		open theWindow
		set current view of theWindow to icon view
		set toolbar visible of theWindow to false
		set statusbar visible of theWindow to false
		set properties of the icon view options of theWindow to { arrangement:not arranged, icon size:128 }

		-- Set the window size/position and the icon position
		set bounds of theWindow to {100, 100, 430, 290}
		set position of theApp to {80, 71}
		set position of theReadMe to {240, 71}
	end tell
	EndOfScript

else
	echo "Set up the window's view options and icon positions."
	echo "(Set DO_APPLESCRIPT to 1 in MakeDiskImage to do this automatically, if they ever fix the Finder bugs.)"
	echo "Then press return to continue."
	read
fi

# Eject the disk
echo "    Ejecting..."
#osascript -e "tell application \"Finder\" to eject disk \"$VOLUME_NAME\""
hdiutil eject $DRIVE   # This doesn't give the Finder a chance to sync... not true anymore though

# Convert the image to a UDIF compressed image 
echo "    Compressing..."
hdiutil convert -format UDCO $SCRATCH_IMAGE -o ${OUTPUT_IMAGE:r}

# Remove the temporary image
echo "    Removing scratch image"
rm -f $SCRATCH_IMAGE

echo "Done!"
