#!/bin/zsh
#
# Script to build the release version of the MIDI Monitor application.

ThisScriptDir=`dirname ${PWD}/$0`

SourceRoot=~/Source
OmniFrameworkSource=${SourceRoot}/OmniGroup/Frameworks
SnoizeSource=${SourceRoot}/Snoize
SnoizeFrameworkSource=${SnoizeSource}/Frameworks
SnoizeAppSource=${SnoizeSource}/Applications

# buildDirectory=`defaults read com.apple.ProjectBuilder PBXIntermediatesDirectory`
# if [ -z "$buildDirectory" ]; then
#     buildDirectory=$PUBLIC/$USER/Products/Builds
# fi
# productDirectory=`defaults read com.apple.ProjectBuilder PBXProductDirectory`
# if [ -z "$productDirectory" ]; then
#     productDirectory=$PUBLIC/$USER/Products
# fi
#
# TODO: Omni used to do the above, then pass the variables in to pbxbuild like
#    SYMROOT=${productDirectory} OBJROOT=${buildDirectory}/${projectName%.pbproj}.build
# This was something of a workaround for the fact that pbxbuild didn't use to read the
# settings from defaults. Nowadays I think we should check for the defaults settings, and if
# they're not there, we should just set them.  (Right? but that has side effects)

PUBLIC=/Users/Shared
INSTALL_DIRECTORY=$PUBLIC/$USER/InstalledProducts
APP_EXECUTABLE_NAME="MIDI Monitor"
APP_WRAPPER_NAME="${APP_EXECUTABLE_NAME}.app"

#
# Process arguments
#

# Default values
DO_CLEAN=1
DO_INSTALL=1
DO_IMAGE=0

for arg in $argv ; do
	case $arg in
		( "-image" )		DO_IMAGE=1 ;;
		( "-noinstall" )	DO_INSTALL=0 ;;
		( "-noclean" )		DO_CLEAN=0 ;;
	esac
done

if [[ $DO_INSTALL -eq 1 ]] ; then
	FRAMEWORK_BUILDSTYLE="DeploymentInApp"
	APP_BUILDSTYLE="Deployment"
	BUILD_ACTION=install
else
	FRAMEWORK_BUILDSTYLE="Development"
	APP_BUILDSTYLE="Development"
	BUILD_ACTION=
fi

#
# Clean everything first
#

if [[ $DO_CLEAN -eq 1 ]] ; then

	cd ${OmniFrameworkSource}/OmniBase
	pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE clean || (echo "Build failed!"; exit 1)

	cd ${OmniFrameworkSource}/OmniFoundation
	pbxbuild -target "OmniFoundation (MIDIMonitor subset framework)" -buildstyle $FRAMEWORK_BUILDSTYLE clean || (echo "Build failed!"; exit 1)

	cd ${SnoizeFrameworkSource}/SnoizeMIDI
	pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE clean || (echo "Build failed!"; exit 1)

	cd ${SnoizeFrameworkSource}/SnoizeMIDISpy
	pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE clean || (echo "Build failed!"; exit 1)

	cd ${SnoizeAppSource}/MIDIMonitor
	pbxbuild -buildstyle $APP_BUILDSTYLE clean || (echo "Build failed!"; exit 1)

fi

#
# Then build
#

if [[ $DO_INSTALL -eq 1 ]] ; then
	mkdir -p "$INSTALL_DIRECTORY"
	rm -rf "$INSTALL_DIRECTORY/$APP_WRAPPER_NAME"
fi

cd ${OmniFrameworkSource}/OmniBase
pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE $BUILD_ACTION || (echo "Build failed!"; exit 1)

cd ${OmniFrameworkSource}/OmniFoundation
pbxbuild -target "OmniFoundation (MIDIMonitor subset framework)" -buildstyle $FRAMEWORK_BUILDSTYLE $BUILD_ACTION || (echo "Build failed!"; exit 1)

cd ${SnoizeFrameworkSource}/SnoizeMIDI
pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE $BUILD_ACTION || (echo "Build failed!"; exit 1)

cd ${SnoizeFrameworkSource}/SnoizeMIDISpy
pbxbuild -buildstyle $FRAMEWORK_BUILDSTYLE $BUILD_ACTION || (echo "Build failed!"; exit 1)

cd ${SnoizeAppSource}/MIDIMonitor
pbxbuild -buildstyle $APP_BUILDSTYLE DSTROOT= INSTALL_MODE_FLAG=go-w,a+rX $BUILD_ACTION || (echo "Build failed!"; exit 1)
	# NOTE: We are relying on the app's project having an INSTALL_PATH
	# set to $INSTALL_DIRECTORY. For some reason, if it is set to nothing in the project,
	# setting it here will not cause the install to happen.
	#
	# INSTALL_MODE_FLAG is normally a-w,a+rX.
	# We change it so the files are still writeable by the owner (us)
	# so we can modify them later

#
# Then remove extra junk from the app and frameworks
#

if [[ $DO_INSTALL -eq 1 ]]; then
	cd "$INSTALL_DIRECTORY/$APP_WRAPPER_NAME"
	# Nobody needs the headers
	find . -name 'Headers' -exec rm -rf {} \; -prune
	# We don't need non-English localizations right now
	find . -name \*.lproj \! -name English.lproj -exec rm -rf {} \; -prune
fi

#
# Then update prebinding. The frameworks' timestamps have changed since they were linked against,
# so their prebinding will be disabled unless we do this.
#

if [[ $DO_INSTALL -eq 1 ]]; then
	cd "$INSTALL_DIRECTORY/$APP_WRAPPER_NAME/Contents/MacOS"
	redo_prebinding -e "$PWD" ../Frameworks/OmniBase.framework/Versions/Current/OmniBase
	redo_prebinding -e "$PWD" ../Frameworks/OmniFoundation.framework/Versions/Current/OmniFoundation
	redo_prebinding -e "$PWD" ../Frameworks/SnoizeMIDI.framework/Versions/Current/SnoizeMIDI
	redo_prebinding -e "$PWD" ../Frameworks/SnoizeMIDISpy.framework/Versions/Current/SnoizeMIDISpy
	redo_prebinding -e "$PWD" "./$APP_EXECUTABLE_NAME"
fi

#
# Then put the app into a disk image (if -image argument is specified)
#

if [[ $DO_IMAGE -eq 1 ]]; then
	if [[ -x "$ThisScriptDir/MakeDiskImage" ]] ; then
		$ThisScriptDir/MakeDiskImage "MIDI Monitor" "MIDIMonitor" "${SnoizeAppSource}/MIDIMonitor/Read Me.html"
	else
		echo "Error: Couldn't find MakeDiskImage script."
	fi
else
	echo "Done!"
fi
